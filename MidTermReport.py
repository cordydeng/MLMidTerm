import joblib
PreTrain=joblib.load("AdvanceHousePricing.pkl")
import pandas as pd
import numpy as np

test=pd.read_csv("test.csv")
test.drop(["Street","Alley","Utilities","PoolArea","PoolQC","Fence","MiscFeature","MiscVal"],axis=1,inplace=True)
test.info()
test["LotFrontage"].mean()
test["LotFrontage"]=test["LotFrontage"].fillna(test["LotFrontage"].mean())
test["MasVnrType"].value_counts().idxmax()
test["MasVnrType"]=test["MasVnrType"].fillna(test["MasVnrType"].value_counts().idxmax())
test["MasVnrArea"].value_counts().idxmax()
test["MasVnrArea"]=test["MasVnrArea"].fillna(test["MasVnrArea"].value_counts().idxmax())

test["BsmtQual"]=test["BsmtQual"].fillna("No")
test["BsmtCond"]=test["BsmtCond"].fillna("No")

test["BsmtExposure"]=test["BsmtExposure"].fillna("Nb")
test["BsmtFinType1"]=test["BsmtFinType1"].fillna("Nb")
test["BsmtFinType2"]=test["BsmtFinType2"].fillna("Nb")

test["Electrical"].value_counts().idxmax()
test["Electrical"]=test["Electrical"].fillna(test["Electrical"].value_counts().idxmax())

test["FireplaceQu"]=test["FireplaceQu"].fillna("Nf")
test["GarageType"]=test["GarageType"].fillna("Ng")
test["GarageYrBlt"]=test["GarageYrBlt"].fillna(0)
test["GarageFinish"]=test["GarageFinish"].fillna("Ng")
test["GarageQual"]=test["GarageQual"].fillna("Ng")
test["GarageCond"]=test["GarageCond"].fillna("Ng")

print(test.isnull().sum().to_string())
test["MSZoning"].value_counts().idxmax()
test["MSZoning"]=test["MSZoning"].fillna(test["MSZoning"].value_counts().idxmax())
test["Exterior1st"].value_counts().idxmax()
test["Exterior1st"]=test["Exterior1st"].fillna(test["Exterior1st"].value_counts().idxmax())
test["Exterior2nd"].value_counts().idxmax()
test["Exterior2nd"]=test["Exterior2nd"].fillna(test["Exterior2nd"].value_counts().idxmax())
test["BsmtFinSF1"].value_counts().idxmax()
test["BsmtFinSF1"]=test["BsmtFinSF1"].fillna(test["BsmtFinSF1"].value_counts().idxmax())
test["BsmtFinSF2"].value_counts().idxmax()
test["BsmtFinSF2"]=test["BsmtFinSF2"].fillna(test["BsmtFinSF2"].value_counts().idxmax())
test["BsmtUnfSF"].value_counts().idxmax()
test["BsmtUnfSF"]=test["BsmtUnfSF"].fillna(test["BsmtUnfSF"].value_counts().idxmax())
test["TotalBsmtSF"].value_counts().idxmax()
test["TotalBsmtSF"]=test["TotalBsmtSF"].fillna(test["TotalBsmtSF"].value_counts().idxmax())
test["BsmtFullBath"].value_counts().idxmax()
test["BsmtFullBath"]=test["BsmtFullBath"].fillna(test["BsmtFullBath"].value_counts().idxmax())
test["BsmtHalfBath"].value_counts().idxmax()
test["BsmtHalfBath"]=test["BsmtHalfBath"].fillna(test["BsmtHalfBath"].value_counts().idxmax())
test["KitchenQual"].value_counts().idxmax()
test["KitchenQual"]=test["KitchenQual"].fillna(test["KitchenQual"].value_counts().idxmax())
test["Functional"].value_counts().idxmax()
test["Functional"]=test["Functional"].fillna(test["Functional"].value_counts().idxmax())
test["GarageCars"].value_counts().idxmax()
test["GarageCars"]=test["GarageCars"].fillna(test["GarageCars"].value_counts().idxmax())
test["GarageArea"].value_counts().idxmax()
test["GarageArea"]=test["GarageArea"].fillna(test["GarageArea"].value_counts().idxmax())
test["SaleType"].value_counts().idxmax()
test["SaleType"]=test["SaleType"].fillna(test["SaleType"].value_counts().idxmax())

testData=pd.get_dummies(data=test)
testData.insert(95,"Condition2_RRAe",0)
testData.insert(96,"Condition2_RRAn",0)
testData.insert(97,"Condition2_RRNn",0)
testData.insert(106,"HouseStyle_2.5Fin",0)
testData.insert(117,"RoofMatl_ClyTile",0)
testData.insert(119,"RoofMatl_Membran",0)
testData.insert(120,"RoofMatl_Metal",0)
testData.insert(121,"RoofMatl_Roll",0)
testData.insert(132,"Exterior1st_ImStucc",0)
testData.insert(135,"Exterior1st_Stone",0)
testData.insert(149,"Exterior2nd_Other",0)
testData.insert(204,"Heating_Floor",0)
testData.insert(208,"Heating_OthW",0)
testData.insert(220,"Electrical_Mix",0)
testData.insert(250,"GarageQual_Ex",0)

testData
testData.info()
print(testData.isnull().sum().to_string())
TestPrediction=PreTrain.predict(testData)
TestPrediction

MidTerm=pd.DataFrame(columns=['Id','SalePrice'])
MidTerm['Id']=range(1461,2920)
MidTerm['SalePrice']=TestPrediction
MidTerm
MidTerm.to_csv('MidTerm.csv', index=False)